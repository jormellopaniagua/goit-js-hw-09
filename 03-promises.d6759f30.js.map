{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAmCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA1CAQ,SAASC,cAAc,SAG/BC,iBAAiB,UAAU,SAAUC,GACxCA,EAAMC,iBAGN,MAAMC,EAAQC,SAASC,KAAKN,cAAc,uBAAuBO,OAC3DC,EAAOH,SAASC,KAAKN,cAAc,sBAAsBO,OACzDE,EAASJ,SAASC,KAAKN,cAAc,wBAAwBO,OAGjE,IAAG,IAAIG,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAK7BrB,EAAYqB,EAAI,EAHGN,EAAQM,EAAIF,GAI9BG,MAAK,EAACrB,SAAEA,EAAQC,MAAEA,MACjBqB,EAAAzB,GAAS0B,OAAOC,QACd,uBAAqBxB,QAAiBC,MAAU,IAGnDwB,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBqB,EAAAzB,GAAS0B,OAAOG,QACd,sBAAoB1B,QAAiBC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n// Obtener referencia al formulario\nconst form = document.querySelector('.form');\n\n// Función para manejar el envío del formulario\nform.addEventListener('submit', function (event) {\n  event.preventDefault(); // Evitar el comportamiento por defecto del formulario\n\n  // Obtener los valores introducidos por el usuario\n  const delay = parseInt(this.querySelector('input[name=\"delay\"]').value);\n  const step = parseInt(this.querySelector('input[name=\"step\"]').value);\n  const amount = parseInt(this.querySelector('input[name=\"amount\"]').value);\n\n  // Llamar a la función createPromise según la cantidad especificada\n  for (let i = 0; i < amount; i++) {\n    // Calcular el retraso para cada promesa teniendo en cuenta el paso\n    const promiseDelay = delay + i * step;\n\n    // Llamar a la función createPromise con la posición y el retraso calculados\n    createPromise(i + 1, promiseDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n});\n\n// Función createPromise completada\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3; // Probabilidad de resolver la promesa\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay }); // Resolver la promesa\n      } else {\n        reject({ position, delay }); // Rechazar la promesa\n      }\n    }, delay); // Retraso en milisegundos\n  });\n}\n"],"names":["$1GAPJ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","delay1","parseInt","this","value","step","amount","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.d6759f30.js.map"}